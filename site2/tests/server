#!/usr/bin/ruby
# A omega server to test jrw.js

require 'rubygems'
require 'omega'

def setup_signals(node)
  Signal.trap("INT") {
    node.halt
  }
end

################# copied from bin/omega-server

RJR::Logger.log_level = ::Logger::DEBUG

config = Omega::Config.load :node_id => 'omega',
                            :amqp_broker => 'localhost',
                            :ws_host     => 'localhost',
                            :www_host    => 'localhost',
                            :tcp_host    => 'localhost',
                            :ws_port     =>  8080,
                            :www_port    =>  8888,
                            :tcp_port    => '8181',
                            :node_types  => ['amqp', 'tcp', 'ws', 'www', 'local']

config.set_config

Motel::RJRAdapter.init
Users::RJRAdapter.init
Cosmos::RJRAdapter.init
Manufactured::RJRAdapter.init
Missions::RJRAdapter.init

local_node = RJR::LocalNode.new :node_id => 'server_seeder'
Omega::Roles::ROLES.keys.collect { |id|
  role = Users::Role.new :id => id
  Omega::Roles::ROLES[id].each { |pe|
    role.add_privilege pe[0], pe[1]
  }
  local_node.invoke_request('users::create_entity', role)
}

# create an initial superadmin user
admin = Users::User.new :id => config.admin_user, :password => config.admin_pass
local_node.invoke_request('users::create_entity', admin)
local_node.invoke_request('users::add_role',       admin.id, 'superadmin')

# create an user for remote location management
rlm = Users::User.new :id => config.remote_location_manager_user, :password => config.remote_location_manager_password
local_node.invoke_request('users::create_entity', rlm)
local_node.invoke_request('users::add_role',       rlm.id, 'remote_location_manager')

# create an user for remote cosmos management
rcm = Users::User.new :id => config.remote_cosmos_manager_user, :password => config.remote_cosmos_manager_password
local_node.invoke_request('users::create_entity', rcm)
local_node.invoke_request('users::add_role',       rcm.id, 'remote_cosmos_manager')

###################################


amqp_node  = RJR::AMQPNode.new  :node_id => 'omega', :broker => 'localhost'
ws_node    = RJR::WSNode.new    :node_id => 'omega', :host   => 'localhost', :port => 8080
www_node   = RJR::WebNode.new   :node_id => 'omega', :host   => 'localhost', :port => 8888
multi_node = RJR::MultiNode.new :nodes => [amqp_node, ws_node, www_node]

setup_signals(multi_node)
multi_node.listen
multi_node.join

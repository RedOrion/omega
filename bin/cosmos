#!/usr/bin/ruby
# Generate motel seed data
#
# Copyright (C) 2012 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3+ http://www.gnu.org/licenses/agpl.txt

require 'rubygems'
require 'omega'

include Omega::DSL

# number of consmos entities to generate, if not set
# a random number will be generated using maxima below
NUM_GALAXIES           = 1
NUM_SYSTEMS_PER_GALAXY = 2
NUM_PLANETS_PER_SYSTEM = 5
NUM_MOONS_PER_PLANET   = 1
NUM_GATES_PER_SYSTEM   = 1
NUM_ASTEROIDS_PER_SYSTEM = 10
NUM_RESOURCES_PER_ASTEROID = 3
NUM_RESOURCES_PER_SOURCE = 50

# number of manufactured entities to generate
NUM_SHIPS = 5
NUM_STATIONS = 5

# cosmos entity generation boundries
# will be used if NUM_ constants aren't set above
MAX_GALAXIES = 5
MAX_SYSTEMS_PER_GALAXY = 5
MAX_GATES_PER_SYSTEM = 3
MAX_PLANETS_PER_SYSTEM = 10
MAX_MOONS_PER_PLANET = 2
MAX_ASTEROIDS_PER_SYSTEM = 20
MAX_RESOURCES_PER_ASTEROID = 15
MAX_RESOURCES_PER_SOURCE = 50

# manufacture entity generation
MAX_SHIPS    = 25
MAX_STATIONS = 5

# playing area boundaries
MAX_WIDTH    = 1000
MAX_HEIGHT   = 1000
MAX_DEPTH    = 1000

# planet elliptical path boundries
MIN_SEMI_LATUS_RECTUM = 100
MAX_SEMI_LATUS_RECTUM = 175
MIN_ECCENTRICITY = 0.1
MAX_ECCENTRICITY = 0.9
MIN_SPEED = 0.05
MAX_SPEED = 0.09

def num_of(entity_type)
  nconst = ("NUM_" + entity_type).intern
  mconst = ("MAX_" + entity_type).intern
  return Object.const_get(nconst) if Object.const_defined?(nconst)
  return rand(Object.const_get(mconst)-1) + 1
end

RJR::Logger.log_level= ::Logger::INFO

login 'admin',  :password => 'nimda'

mmorsi =
  user 'mmorsi', :password => 'foobar', :email => 'mo@morsi.org' do |u|
    privilege 'view',   'locations'
    privilege 'view',   'cosmos_entities'
    privilege 'view',   'manufactured_entities'
    privilege 'view',   'users_entities'
    privilege 'create', 'manufactured_entities'
    privilege 'modify', 'manufactured_entities'
    privilege 'modify', 'user-mmorsi'
  end
jbob = user 'jbob'

mmorsi_alliance = alliance 'mmorsi-alliance', :members => [mmorsi]
alliance 'jbob-alliance' do |a|
  a.members << jbob
  a.enemies << mmorsi_alliance
end

num_galaxies = num_of('GALAXIES')
0.upto(num_galaxies-1) do |gi|
  galaxy rand_name do |g|

    galaxy_systems = []
    num_systems = num_of('SYSTEMS_PER_GALAXY')
    0.upto(num_systems-1) do |si|
      system rand_name, rand_name, :location => rand_location(:max_x => MAX_WIDTH/2, :max_y => MAX_HEIGHT/2, :max_z => MAX_DEPTH/2) do |sys|
        galaxy_systems << sys

        num_planets = num_of('PLANETS_PER_SYSTEM')
        0.upto(num_planets-1) do |pi|
          planet rand_name do |pl|
            pl.movement_strategy =
              elliptical :relative_to => :foci,
                         :speed => 0.1,
                         :max_e => MAX_ECCENTRICITY,
                         :min_e => MIN_ECCENTRICITY,
                         :min_l => MAX_SEMI_LATUS_RECTUM,
                         :max_l => MAX_SEMI_LATUS_RECTUM,
                         :min_s => MIN_SPEED,
                         :max_s => MAX_SPEED


            num_moons = num_of('MOONS_PER_PLANET')
            0.upto(num_moons-1) do |mi|
              moon rand_name, :location => rand_location(:min => pl.size, :max => pl.size * 2.3)
            end # end moons
          end
        end # end planets

        num_asteroids = num_of('ASTEROIDS_PER_SYSTEM')
        0.upto(num_asteroids-1) do |ai|
          asteroid rand_name, :location => rand_location(:max_x => MAX_WIDTH/2, :max_y => MAX_HEIGHT/2, :max_z => MAX_DEPTH/2) do |ast|
            num_resources = num_of('RESOURCES_PER_ASTEROID')
            0.upto(num_resources-1) do |ri|
              resource_quantity = num_of('RESOURCES_PER_SOURCE')
              resource :resource => rand_resource, :quantity => resource_quantity
            end
          end
        end

      end
    end # end systems

    begin
      galaxy_systems.each { |sys|
        num_gates = num_of("GATES_PER_SYSTEM")
        used_systems = [sys]
        0.upto(num_gates-1){
          endpoint = rand_galaxy_system(g, used_systems)
          jump_gate sys, endpoint,
                    :location => rand_location(:max_x => MAX_WIDTH/2, :max_y => MAX_HEIGHT/2, :max_z => MAX_DEPTH/2)
        }
      }
    rescue ArgumentError => e
      puts "Error received #{e}, not generating any more jump gates"
    end
  end
end  # end galaxies

total_ships = 0

all_ships = []
num_ships = num_of('SHIPS')
0.upto(num_ships-1) { |si|
  total_ships += 1
  all_ships << ship("ship#{total_ships}") do |ship|
                 ship.type    = rand_ship_type
                 ship.user_id = 'mmorsi'
                 ship.solar_system  = rand_system
                 ship.location = rand_location(:max_x => MAX_WIDTH/2, :max_y => MAX_HEIGHT/2, :max_z => MAX_DEPTH/2)
               end

  #track_movement 25 do
  #end
  #track_proximity 'ship2' do
  #end
}

total_stations = 0
all_stations = []
num_stations = num_of('STATIONS')
0.upto(num_stations-1) { |si|
  total_stations += 1
  all_stations << station("station#{total_stations}") do |station|
                 station.type = rand_station_type
                 station.user_id ='mmorsi'
                 station.solar_system = rand_system
                 station.location = rand_location(:max_x => MAX_WIDTH/2, :max_y => MAX_HEIGHT/2, :max_z => MAX_DEPTH/2)
               end
}

fleet 'fleet1', :user_id => 'mmorsi', :ships => all_ships
fleet 'fleet2' do |fl|
  fl.user_id = 'jbob'
end

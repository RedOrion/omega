#!/usr/bin/ruby
# Generate motel seed data
#
# Copyright (C) 2012 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3+ http://www.gnu.org/licenses/agpl.txt

require 'rubygems'
require 'motel'
require 'cosmos'
require 'rjr'

# cosmos entity generation boundries
MAX_GALAXIES = 5
MAX_SYSTEMS_PER_GALAXY = 5
MAX_PLANETS_PER_SYSTEM = 5
MAX_MOONS_PER_PLANET = 2

# planet elliptical path boundries
MIN_SEMI_LATUS_RECTUM = 50
MAX_SEMI_LATUS_RECTUM = 100
MIN_ECCENTRICITY = 0.1
MAX_ECCENTRICITY = 0.9
MIN_SPEED = 0.05
MAX_SPEED = 0.09

def main()
  RJR::Logger.log_level= ::Logger::INFO

  rjr_node = RJR::AMQPNode.new :node_id => 'seeder', :broker => 'localhost'

  total_galaxies = total_systems = total_planets = total_moons = 0

  num_galaxies = rand(MAX_GALAXIES)
  0.upto(num_galaxies) { |gi|
    total_galaxies += 1
    g = rjr_node.invoke_request('motel-queue', 'create_entity', 
             Cosmos::Galaxy.new(:name => "galaxy#{total_galaxies}"), :universe)
    puts "Created galaxy #{g.name} (loc #{g.location.id})"

    systems = []
    num_systems = rand(MAX_SYSTEMS_PER_GALAXY)
    0.upto(num_systems) { |si|
      total_systems += 1
      sys = rjr_node.invoke_request('motel-queue', 'create_entity',
             Cosmos::SolarSystem.new(:name => "system#{total_systems}",
                                     :location => Motel::Location.random(:max => g.size, :min => -1 * g.size)), g)
      systems << sys
      puts "Created system #{sys.name} (loc #{sys.location.id})"

      star = rjr_node.invoke_request('motel-queue', 'create_entity',
                               Cosmos::Star.new(:name => "star#{total_systems}"), sys)
      puts "Created star #{star.name} (loc #{star.location.id})"

      num_planets = rand(MAX_PLANETS_PER_SYSTEM)
      0.upto(num_planets) { |pi|
        total_planets += 1
        ploc = Motel::Location.random(:max => sys.size)
        ploc.movement_strategy =
          Motel::MovementStrategies::Elliptical.random(:relative_to => :foci,
                                                       :speed => 0.1,
                                                       :max_e => MAX_ECCENTRICITY,
                                                       :min_e => MIN_ECCENTRICITY,
                                                       :min_l => MAX_SEMI_LATUS_RECTUM,
                                                       :max_l => MAX_SEMI_LATUS_RECTUM,
                                                       :min_s => MIN_SPEED,
                                                       :max_s => MAX_SPEED)
        pl = rjr_node.invoke_request('motel-queue', 'create_entity',
                  Cosmos::Planet.new(:name => "planet#{total_planets}",
                                     :location => ploc), sys)
        puts "Created planet #{pl.name} (loc #{pl.location.id})"

        num_moons = rand(MAX_MOONS_PER_PLANET)
        0.upto(num_moons) { |mi|
          total_moons += 1
          mn = rjr_node.invoke_request('motel-queue', 'create_entity',
               Cosmos::Moon.new(:name => "moon#{total_moons}",
                 :location => Motel::Location.random(:min => pl.size, :max => pl.size * 2.3)), pl)
          puts "Created moon #{mn.name} (loc #{mn.location.id})"
        }
      }
    }

    # after systems have been created in galaxy, connect them through jump gates
    if systems.size > 1
      0.upto(systems.size - 1){ |si|
        sys = systems[si]
        num_gates = (1 + rand(systems.size-2)).to_i
        endpoint  = si - 1
        if endpoint >= 0
          0.upto(num_gates) { |ji|
            gate = rjr_node.invoke_request('motel-queue', 'create_entity',
                     Cosmos::JumpGate.new(:solar_system => sys, :endpoint => systems[endpoint]), sys)
            endpoint -= 1
            puts "Created jump_gate from #{gate.solar_system} to #{gate.endpoint} (loc #{gate.location.id})"
          }
        end
      }
    end
  }

  #galaxy = rjr_node.invoke_request('motel-queue', 'get_entity', 'galaxy', 'galaxy1')
  #rjr_node.invoke_request('motel-queue', 'track_location', 4)
  #rjr_node.listen
end

main()

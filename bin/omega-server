#!/usr/bin/ruby
# A motel server executable
# Executable to launch various rjr methods 
#
# Flags:
#  -h --help
#
# Copyright (C) 2011 Mohammed Morsi <mo@morsi.org>
# Licensed under the AGPLv3+ http://www.gnu.org/licenses/agpl.txt

require 'rubygems'
require 'optparse'
require 'fileutils'
require 'omega'

BACKUP_FILE = File.expand_path(File.dirname(__FILE__) + "/../backups/backup.unv")

######################

def setup_signals
  Signal.trap("USR1") {
    puts "Backup"
    current_backup = "#{BACKUP_FILE}.#{Time.now.strftime("%Y.%m.%d-%H.%M.%S")}"
    local_node = RJR::LocalNode.new :node_id => 'admin'
    local_node.invoke_request('motel::save_state', current_backup)
    local_node.invoke_request('cosmos::save_state', current_backup)
    local_node.invoke_request('manufactured::save_state', current_backup)
    local_node.invoke_request('users::save_state', current_backup)
    FileUtils.rm_f(BACKUP_FILE) if File.exists?(BACKUP_FILE)
    FileUtils.ln_s(current_backup, BACKUP_FILE)
  }

  Signal.trap("USR2") {
    puts "Restore"
    current_backup = "#{BACKUP_FILE}"
    local_node = RJR::LocalNode.new :node_id => 'admin'
    local_node.invoke_request('motel::restore_state', current_backup)
    local_node.invoke_request('cosmos::restore_state', current_backup)
    local_node.invoke_request('manufactured::restore_state', current_backup)
    local_node.invoke_request('users::restore_state', current_backup)
  }

  Signal.trap("INT") {
    EventMachine.stop
    #multi_node.terminate
  }
end

def main()
  # setup cmd line options
  opts = OptionParser.new do |opts|
    opts.on("-h", "--help", "Print help message") do
       puts opts
       exit
    end
  end

  # parse cmd line
  begin
    opts.parse!(ARGV)
  rescue OptionParser::InvalidOption
    puts opts
    exit
  end

  RJR::Logger.log_level = ::Logger::DEBUG

  Motel::RJRAdapter.init
  Users::RJRAdapter.init
  Cosmos::RJRAdapter.init
  Manufactured::RJRAdapter.init

  amqp_node  = RJR::AMQPNode.new  :node_id => 'omega', :broker => 'localhost'
  ws_node    = RJR::WSNode.new    :node_id => 'omega', :host   => 'localhost', :port => 8080
  www_node   = RJR::WebNode.new   :node_id => 'omega', :host   => 'localhost', :port => 8888
  local_node = RJR::LocalNode.new :node_id => 'omega' # not technically needed

  multi_node = RJR::MultiNode.new :nodes => [amqp_node, ws_node, www_node, local_node]

  # FIXME lookup initial users to create from config

  # create an initial superadmin user
  admin = Omega::Roles.create_user('admin', 'nimda')
  Omega::Roles.create_user_role(admin, :superadmin)

  # create an user for remote location management
  rlm  = Omega::Roles.create_user('rlm', 'mlr')
  Omega::Roles.create_user_role(rlm, :remote_location_manager)

  multi_node.listen {
    setup_signals
  }
end

main()
